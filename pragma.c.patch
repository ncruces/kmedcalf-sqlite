Index: src/pragma.c
==================================================================
--- src/pragma.c
+++ src/pragma.c
@@ -24,17 +24,17 @@
 /***************************************************************************
 ** The "pragma.h" include file is an automatically generated file that
 ** that includes the PragType_XXXX macro definitions and the aPragmaName[]
 ** object.  This ensures that the aPragmaName[] table is arranged in
 ** lexicographical order to facility a binary search of the pragma name.
-** Do not edit pragma.h directly.  Edit and rerun the script in at 
+** Do not edit pragma.h directly.  Edit and rerun the script in at
 ** ../tool/mkpragmatab.tcl. */
 #include "pragma.h"
 
 /*
 ** Interpret the given string as a safety level.  Return 0 for OFF,
-** 1 for ON or NORMAL, 2 for FULL, and 3 for EXTRA.  Return 1 for an empty or 
+** 1 for ON or NORMAL, 2 for FULL, and 3 for EXTRA.  Return 1 for an empty or
 ** unrecognized string argument.  The FULL and EXTRA option is disallowed
 ** if the omitFull parameter it 1.
 **
 ** Note that the values returned are one less that the values that
 ** should be passed into sqlite3BtreeSetSafetyLevel().  The is done
@@ -89,11 +89,11 @@
 
 #ifndef SQLITE_OMIT_AUTOVACUUM
 /*
 ** Interpret the given string as an auto-vacuum mode value.
 **
-** The following strings, "none", "full" and "incremental" are 
+** The following strings, "none", "full" and "incremental" are
 ** acceptable, as are their numeric equivalents: 0, 1 and 2 respectively.
 */
 static int getAutoVacuum(const char *z){
   int i;
   if( 0==sqlite3StrICmp(z, "none") ) return BTREE_AUTOVACUUM_NONE;
@@ -243,11 +243,11 @@
   switch( action ){
     case OE_SetNull:  zName = "SET NULL";        break;
     case OE_SetDflt:  zName = "SET DEFAULT";     break;
     case OE_Cascade:  zName = "CASCADE";         break;
     case OE_Restrict: zName = "RESTRICT";        break;
-    default:          zName = "NO ACTION";  
+    default:          zName = "NO ACTION";
                       assert( action==OE_None ); break;
   }
   return zName;
 }
 #endif
@@ -305,11 +305,11 @@
   Vdbe *v,               /* The prepared statement being created */
   FuncDef *p,            /* A particular function definition */
   int isBuiltin,         /* True if this is a built-in function */
   int showInternFuncs    /* True if showing internal functions */
 ){
-  u32 mask = 
+  u32 mask =
       SQLITE_DETERMINISTIC |
       SQLITE_DIRECTONLY |
       SQLITE_SUBTYPE |
       SQLITE_INNOCUOUS |
       SQLITE_FUNC_INTERNAL
@@ -327,11 +327,11 @@
     if( p->xSFunc==0 ) continue;
     if( (p->funcFlags & SQLITE_FUNC_INTERNAL)!=0
      && showInternFuncs==0
     ){
       continue;
-    }    
+    }
     if( p->xValue!=0 ){
       zType = "w";
     }else if( p->xFinalize!=0 ){
       zType = "a";
     }else{
@@ -362,11 +362,11 @@
   sqlite3VdbeAddOp0(v, OP_Halt);
   return addr;
 }
 
 /*
-** Process a pragma statement.  
+** Process a pragma statement.
 **
 ** Pragmas are of this form:
 **
 **      PRAGMA [schema.]id [= value]
 **
@@ -377,11 +377,11 @@
 ** If the left side is "database.id" then pId1 is the database name
 ** and pId2 is the id.  If the left side is just "id" then pId1 is the
 ** id and pId2 is any empty string.
 */
 void sqlite3Pragma(
-  Parse *pParse, 
+  Parse *pParse,
   Token *pId1,        /* First part of [schema.]id field */
   Token *pId2,        /* Second part of [schema.]id field, or NULL */
   Token *pValue,      /* Token for <value>, or NULL */
   int minusFlag       /* True if a '-' sign preceded <value> */
 ){
@@ -405,12 +405,12 @@
   ** index of the database this pragma is being applied to in db.aDb[]. */
   iDb = sqlite3TwoPartName(pParse, pId1, pId2, &pId);
   if( iDb<0 ) return;
   pDb = &db->aDb[iDb];
 
-  /* If the temp database has been explicitly named as part of the 
-  ** pragma, make sure it is open. 
+  /* If the temp database has been explicitly named as part of the
+  ** pragma, make sure it is open.
   */
   if( iDb==1 && sqlite3OpenTempDatabase(pParse) ){
     return;
   }
 
@@ -474,23 +474,29 @@
     goto pragma_out;
   }
 
   /* Make sure the database schema is loaded if the pragma requires that */
   if( (pPragma->mPragFlg & PragFlg_NeedSchema)!=0 ){
-    if( sqlite3ReadSchema(pParse) ) goto pragma_out;
+    if( IsSharedSchema(db) && (zDb || (pPragma->mPragFlg & PragFlg_OneSchema)) ){
+      assert( iDb>=0 && iDb<db->nDb );
+      pParse->rc = sqlite3SchemaLoad(db, iDb, 0, &pParse->zErrMsg);
+      if( pParse->rc ) goto pragma_out;
+    }else{
+      if( sqlite3ReadSchema(pParse) ) goto pragma_out;
+    }
   }
 
   /* Register the result column names for pragmas that return results */
-  if( (pPragma->mPragFlg & PragFlg_NoColumns)==0 
+  if( (pPragma->mPragFlg & PragFlg_NoColumns)==0
    && ((pPragma->mPragFlg & PragFlg_NoColumns1)==0 || zRight==0)
   ){
     setPragmaResultColumnNames(v, pPragma);
   }
 
   /* Jump to the appropriate pragma handler */
   switch( pPragma->ePragTyp ){
-  
+
 #if !defined(SQLITE_OMIT_PAGER_PRAGMAS) && !defined(SQLITE_OMIT_DEPRECATED)
   /*
   **  PRAGMA [schema.]default_cache_size
   **  PRAGMA [schema.]default_cache_size=N
   **
@@ -602,11 +608,11 @@
   /*
   **  PRAGMA [schema.]max_page_count
   **  PRAGMA [schema.]max_page_count=N
   **
   ** The first form reports the current setting for the
-  ** maximum number of pages in the database file.  The 
+  ** maximum number of pages in the database file.  The
   ** second form attempts to change this setting.  Both
   ** forms return the current setting.
   **
   ** The absolute value of N is used.  This is undocumented and might
   ** change.  The only purpose is to provide an easy way to test
@@ -769,11 +775,11 @@
       ** creates the database file. It is important that it is created
       ** as an auto-vacuum capable db.
       */
       rc = sqlite3BtreeSetAutoVacuum(pBt, eAuto);
       if( rc==SQLITE_OK && (eAuto==1 || eAuto==2) ){
-        /* When setting the auto_vacuum mode to either "full" or 
+        /* When setting the auto_vacuum mode to either "full" or
         ** "incremental", write the value of meta[6] in the database
         ** file. Before writing to meta[6], check that meta[3] indicates
         ** that this really is an auto-vacuum capable database.
         */
         static const int iLn = VDBE_OFFSET_LINENO(2);
@@ -871,11 +877,11 @@
   */
   case PragTyp_CACHE_SPILL: {
     assert( sqlite3SchemaMutexHeld(db, iDb, 0) );
     if( !zRight ){
       returnSingleInt(v,
-         (db->flags & SQLITE_CacheSpill)==0 ? 0 : 
+         (db->flags & SQLITE_CacheSpill)==0 ? 0 :
             sqlite3BtreeSetSpillSize(pDb->pBt,0));
     }else{
       int size = 1;
       if( sqlite3GetInt32(zRight, &size) ){
         sqlite3BtreeSetSpillSize(pDb->pBt, size);
@@ -1045,33 +1051,33 @@
   case PragTyp_LOCK_PROXY_FILE: {
     if( !zRight ){
       Pager *pPager = sqlite3BtreePager(pDb->pBt);
       char *proxy_file_path = NULL;
       sqlite3_file *pFile = sqlite3PagerFile(pPager);
-      sqlite3OsFileControlHint(pFile, SQLITE_GET_LOCKPROXYFILE, 
+      sqlite3OsFileControlHint(pFile, SQLITE_GET_LOCKPROXYFILE,
                            &proxy_file_path);
       returnSingleText(v, proxy_file_path);
     }else{
       Pager *pPager = sqlite3BtreePager(pDb->pBt);
       sqlite3_file *pFile = sqlite3PagerFile(pPager);
       int res;
       if( zRight[0] ){
-        res=sqlite3OsFileControl(pFile, SQLITE_SET_LOCKPROXYFILE, 
+        res=sqlite3OsFileControl(pFile, SQLITE_SET_LOCKPROXYFILE,
                                      zRight);
       } else {
-        res=sqlite3OsFileControl(pFile, SQLITE_SET_LOCKPROXYFILE, 
+        res=sqlite3OsFileControl(pFile, SQLITE_SET_LOCKPROXYFILE,
                                      NULL);
       }
       if( res!=SQLITE_OK ){
         sqlite3ErrorMsg(pParse, "failed to set lock proxy file");
         goto pragma_out;
       }
     }
     break;
   }
-#endif /* SQLITE_ENABLE_LOCKING_STYLE */      
-    
+#endif /* SQLITE_ENABLE_LOCKING_STYLE */
+
   /*
   **   PRAGMA [schema.]synchronous
   **   PRAGMA [schema.]synchronous=OFF|ON|NORMAL|FULL|EXTRA
   **
   ** Return or set the local value of the synchronous flag.  Changing
@@ -1082,11 +1088,11 @@
   case PragTyp_SYNCHRONOUS: {
     if( !zRight ){
       returnSingleInt(v, pDb->safety_level-1);
     }else{
       if( !db->autoCommit ){
-        sqlite3ErrorMsg(pParse, 
+        sqlite3ErrorMsg(pParse,
             "Safety level may not be changed inside a transaction");
       }else if( iDb!=1 ){
         int iLevel = (getSafetyLevel(zRight,0,1)+1) & PAGER_SYNCHRONOUS_MASK;
         if( iLevel==0 ) iLevel = 1;
         pDb->safety_level = iLevel;
@@ -1130,11 +1136,11 @@
           ** in addition, the schema is reloaded. */
           sqlite3ResetAllSchemasOfConnection(db);
         }
       }
 
-      /* Many of the flag-pragmas modify the code generated by the SQL 
+      /* Many of the flag-pragmas modify the code generated by the SQL
       ** compiler (eg. count_changes). So add an opcode to expire all
       ** compiled SQL statements after modifying a pragma value.
       */
       sqlite3VdbeAddOp0(v, OP_Expire);
       setAllPagerFlags(db);
@@ -1148,31 +1154,56 @@
   **   PRAGMA table_info(<table>)
   **
   ** Return a single row for each column of the named table. The columns of
   ** the returned data set are:
   **
-  ** cid:        Column id (numbered from left to right, starting at 0)
+  ** cid:        Column id (numbered from left to right, starting at 0,
+  **                        implicit rowid -1 included for table_xinfo)
   ** name:       Column name
   ** type:       Column declaration type.
+  ** aff:        Column affinity
+  ** coll:       Column collation
   ** notnull:    True if 'NOT NULL' is part of column declaration
   ** dflt_value: The default value for the column, if any.
   ** pk:         Non-zero for PK fields.
+  ** rowid       Column is RowID
+  ** autoinc     RowID is AutoIncrement
+  ** hidden      Hidden Column (table_xinfo only)
   */
   case PragTyp_TABLE_INFO: if( zRight ){
     Table *pTab;
+    int iPKey;
+    char *affinity[] = {"NONE", "BLOB", "TEXT", "NUMERIC", "INTEGER", "REAL"};
     sqlite3CodeVerifyNamedSchema(pParse, zDb);
     pTab = sqlite3LocateTable(pParse, LOCATE_NOERR, zRight, zDb);
     if( pTab ){
       int i, k;
       int nHidden = 0;
       Column *pCol;
       Index *pPk = sqlite3PrimaryKeyIndex(pTab);
-      pParse->nMem = 7;
+      pParse->nMem = 11;
       sqlite3ViewGetColumnNames(pParse, pTab);
+      iPKey = pTab->iPKey;
+      if ((iPKey < 0) && (pPragma->iArg == 1) && (pTab->eTabType != TABTYP_VIEW) && HasRowid(pTab))
+        sqlite3VdbeMultiLoad(v, 1, "issssisiiii",
+               iPKey,
+               NULL,
+               NULL,
+               "INTEGER",
+               NULL,
+               0,
+               NULL,
+               1,
+               1,
+               0,
+               1);
       for(i=0, pCol=pTab->aCol; i<pTab->nCol; i++, pCol++){
         int isHidden = 0;
+        int affcode = (int)(pCol->affinity - SQLITE_AFF_NONE);
         const Expr *pColExpr;
+        if ((affcode < 0) || (affcode > 5))
+            affcode = 0;
         if( pCol->colFlags & COLFLAG_NOINSERT ){
           if( pPragma->iArg==0 ){
             nHidden++;
             continue;
           }
@@ -1193,100 +1224,25 @@
         }
         pColExpr = sqlite3ColumnExpr(pTab,pCol);
         assert( pColExpr==0 || pColExpr->op==TK_SPAN || isHidden>=2 );
         assert( pColExpr==0 || !ExprHasProperty(pColExpr, EP_IntValue)
                   || isHidden>=2 );
-        sqlite3VdbeMultiLoad(v, 1, pPragma->iArg ? "issisii" : "issisi",
+        sqlite3VdbeMultiLoad(v, 1, pPragma->iArg ? "issssisiiii" : "issssisiii",
                i-nHidden,
                pCol->zCnName,
-               sqlite3ColumnType(pCol,""),
+               sqlite3ColumnType(pCol,NULL),
+               affinity[affcode],
+               sqlite3ColumnColl(pCol),
                pCol->notNull ? 1 : 0,
                (isHidden>=2 || pColExpr==0) ? 0 : pColExpr->u.zToken,
                k,
+               iPKey == i,
+               ((iPKey == i) && ((pTab->tabFlags & TF_Autoincrement) != 0)),
                isHidden);
       }
     }
   }
-  break;
-
-  /*
-  **   PRAGMA table_list
-  **
-  ** Return a single row for each table, virtual table, or view in the
-  ** entire schema.
-  **
-  ** schema:     Name of attached database hold this table
-  ** name:       Name of the table itself
-  ** type:       "table", "view", "virtual", "shadow"
-  ** ncol:       Number of columns
-  ** wr:         True for a WITHOUT ROWID table
-  ** strict:     True for a STRICT table
-  */
-  case PragTyp_TABLE_LIST: {
-    int ii;
-    pParse->nMem = 6;
-    sqlite3CodeVerifyNamedSchema(pParse, zDb);
-    for(ii=0; ii<db->nDb; ii++){
-      HashElem *k;
-      Hash *pHash;
-      int initNCol;
-      if( zDb && sqlite3_stricmp(zDb, db->aDb[ii].zDbSName)!=0 ) continue;
-
-      /* Ensure that the Table.nCol field is initialized for all views
-      ** and virtual tables.  Each time we initialize a Table.nCol value
-      ** for a table, that can potentially disrupt the hash table, so restart
-      ** the initialization scan.
-      */
-      pHash = &db->aDb[ii].pSchema->tblHash;
-      initNCol = sqliteHashCount(pHash);
-      while( initNCol-- ){
-        for(k=sqliteHashFirst(pHash); 1; k=sqliteHashNext(k) ){
-          Table *pTab;
-          if( k==0 ){ initNCol = 0; break; }
-          pTab = sqliteHashData(k);
-          if( pTab->nCol==0 ){
-            char *zSql = sqlite3MPrintf(db, "SELECT*FROM\"%w\"", pTab->zName);
-            if( zSql ){
-              sqlite3_stmt *pDummy = 0;
-              (void)sqlite3_prepare(db, zSql, -1, &pDummy, 0);
-              (void)sqlite3_finalize(pDummy);
-              sqlite3DbFree(db, zSql);
-            }
-            if( db->mallocFailed ){
-              sqlite3ErrorMsg(db->pParse, "out of memory");
-              db->pParse->rc = SQLITE_NOMEM_BKPT;
-            }
-            pHash = &db->aDb[ii].pSchema->tblHash;
-            break;
-          }
-        }
-      }
-
-      for(k=sqliteHashFirst(pHash); k; k=sqliteHashNext(k) ){
-        Table *pTab = sqliteHashData(k);
-        const char *zType;
-        if( zRight && sqlite3_stricmp(zRight, pTab->zName)!=0 ) continue;
-        if( IsView(pTab) ){
-          zType = "view";
-        }else if( IsVirtual(pTab) ){
-          zType = "virtual";
-        }else if( pTab->tabFlags & TF_Shadow ){
-          zType = "shadow";
-        }else{
-          zType = "table";
-        }
-        sqlite3VdbeMultiLoad(v, 1, "sssiii",
-           db->aDb[ii].zDbSName,
-           sqlite3PreferredTableName(pTab->zName),
-           zType,
-           pTab->nCol,
-           (pTab->tabFlags & TF_WithoutRowid)!=0,
-           (pTab->tabFlags & TF_Strict)!=0
-        );
-      }
-    }
-  }
   break;
 
 #ifdef SQLITE_DEBUG
   case PragTyp_STATS: {
     Index *pIdx;
@@ -1344,11 +1300,11 @@
       sqlite3CodeVerifySchema(pParse, iIdxDb);
       assert( pParse->nMem<=pPragma->nPragCName );
       for(i=0; i<mx; i++){
         i16 cnum = pIdx->aiColumn[i];
         sqlite3VdbeMultiLoad(v, 1, "iisX", i, cnum,
-                             cnum<0 ? 0 : pTab->aCol[cnum].zCnName);
+                             cnum<0 ? NULL : pTab->aCol[cnum].zCnName);
         if( pPragma->iArg ){
           sqlite3VdbeMultiLoad(v, 4, "isiX",
             pIdx->aSortOrder[i],
             pIdx->azColl[i],
             i<pIdx->nKeyCol);
@@ -1378,10 +1334,43 @@
            pIdx->pPartIdxWhere!=0);
       }
     }
   }
   break;
+
+  case PragTyp_TRIGGER_LIST: if( zRight ){
+    Trigger *pTrg;
+    Table *pTab;
+    char *optype;
+    int i;
+    pTab = sqlite3FindTable(db, zRight, zDb);
+    if( pTab ){
+      pParse->nMem = 4;
+      for(pTrg=pTab->pTrigger, i=0; pTrg; pTrg=pTrg->pNext, i++){
+                switch (pTrg->op)
+                {
+                    case TK_INSERT:
+                        optype = "insert";
+                        break;
+                    case TK_UPDATE:
+                        optype = "update";
+                        break;
+                    case TK_DELETE:
+                        optype = "delete";
+                        break;
+                    default:
+                        optype = "unknown";
+                }
+        sqlite3VdbeMultiLoad(v, 1, "isss",
+           i,
+           pTrg->zName,
+           pTrg->tr_tm == 1 ? "before" : "after",
+           optype);
+      }
+    }
+  }
+  break;
 
   case PragTyp_DATABASE_LIST: {
     int i;
     pParse->nMem = 3;
     for(i=0; i<db->nDb; i++){
@@ -1392,10 +1381,164 @@
          db->aDb[i].zDbSName,
          sqlite3BtreeGetFilename(db->aDb[i].pBt));
     }
   }
   break;
+
+case PragTyp_DATABASE_INFO:
+{
+    int i;
+    HashElem *he;
+    char *zDbSName;
+
+    pParse->nMem = 3;
+    for(i=0; i<db->nDb; i++)
+    {
+        if( db->aDb[i].pBt==0 ) continue;
+        assert( db->aDb[i].zDbSName!=0 );
+        zDbSName = db->aDb[i].zDbSName;
+        for(he=sqliteHashFirst(&(db->aDb[i].pSchema->tblHash)); he; he=sqliteHashNext(he))
+        {
+            Table *pData = sqliteHashData(he);
+            sqlite3VdbeMultiLoad(v, 1, "sss",
+                zDbSName,
+                pData->eTabType == TABTYP_VIEW ? "view" : (IsVirtual(pData) ? "vtable" : "table"),
+                pData->zName);
+        }
+        for(he=sqliteHashFirst(&(db->aDb[i].pSchema->idxHash)); he; he=sqliteHashNext(he))
+        {
+            Index *pData = sqliteHashData(he);
+            sqlite3VdbeMultiLoad(v, 1, "sss",
+                zDbSName,
+                "index",
+                pData->zName);
+        }
+        for(he=sqliteHashFirst(&(db->aDb[i].pSchema->trigHash)); he; he=sqliteHashNext(he))
+        {
+            Trigger *pData = sqliteHashData(he);
+            sqlite3VdbeMultiLoad(v, 1, "sss",
+                zDbSName,
+                "trigger",
+                pData->zName);
+        }
+    }
+#ifndef SQLITE_OMIT_VIRTUALTABLE
+    for(he=sqliteHashFirst(&(db->aModule)); he; he=sqliteHashNext(he))
+    {
+        Module *pModule = sqliteHashData(he);
+        if (pModule->pEpoTab)
+            sqlite3VdbeMultiLoad(v, 1, "sss",
+                "main",
+                "etable",
+                pModule->pEpoTab->zName);
+    }
+#endif
+}
+break;
+
+case PragTyp_TABLE_LIST:
+{
+    int i;
+    HashElem *he;
+    char *zDbSName;
+
+    pParse->nMem = 12;
+
+    sqlite3CodeVerifyNamedSchema(pParse, zDb);
+    for (int ii=0; ii<db->nDb; ii++)
+    {
+        HashElem *k;
+        Hash *pHash;
+        int initNCol;
+        if (zDb && sqlite3_stricmp(zDb, db->aDb[ii].zDbSName) != 0) continue;
+
+        /* Ensure that the Table.nCol field is initialized for all views
+        ** and virtual tables.  Each time we initialize a Table.nCol value
+        ** for a table, that can potentially disrupt the hash table, so restart
+        ** the initialization scan.
+        */
+        pHash = &db->aDb[ii].pSchema->tblHash;
+        initNCol = sqliteHashCount(pHash);
+        while (initNCol--)
+        {
+            for(k=sqliteHashFirst(pHash); 1; k=sqliteHashNext(k))
+            {
+                Table *pTab;
+                if (k==0)
+                {
+                    initNCol = 0;
+                    break;
+                }
+                pTab = sqliteHashData(k);
+                if (pTab->nCol==0)
+                {
+                    char *zSql = sqlite3MPrintf(db, "SELECT*FROM\"%w\"", pTab->zName);
+                    if (zSql)
+                    {
+                        sqlite3_stmt *pDummy = 0;
+                        (void)sqlite3_prepare(db, zSql, -1, &pDummy, 0);
+                        (void)sqlite3_finalize(pDummy);
+                        sqlite3DbFree(db, zSql);
+                    }
+                    if( db->mallocFailed ){
+                      sqlite3ErrorMsg(db->pParse, "out of memory");
+                      db->pParse->rc = SQLITE_NOMEM_BKPT;
+                    }
+                    pHash = &db->aDb[ii].pSchema->tblHash;
+                    break;
+                }
+            }
+        }
+    }
+
+    for(i=0; i<db->nDb; i++)
+    {
+        if( db->aDb[i].pBt==0 ) continue;
+        assert( db->aDb[i].zDbSName!=0 );
+        zDbSName = db->aDb[i].zDbSName;
+        for(he=sqliteHashFirst(&(db->aDb[i].pSchema->tblHash)); he; he=sqliteHashNext(he))
+        {
+            Table *pData = sqliteHashData(he);
+            sqlite3VdbeMultiLoad(v, 1, "sssiiiiiiiii",
+                zDbSName,
+                pData->eTabType == TABTYP_VIEW ? "view" : (IsVirtual(pData) ? "vtable" : "table"),
+                sqlite3PreferredTableName(pData->zName),
+                pData->nCol,
+                (pData->tabFlags & TF_Readonly) != 0,
+                (pData->tabFlags & TF_Ephemeral) != 0,
+                HasRowid(pData) & (pData->eTabType != TABTYP_VIEW),
+                (pData->tabFlags & TF_HasPrimaryKey) != 0,
+                (pData->tabFlags & TF_Autoincrement) != 0,
+                (pData->iPKey > -1) & HasRowid(pData),
+                (pData->tabFlags & TF_Strict) != 0,
+                (pData->tabFlags & TF_Shadow) != 0);
+        }
+    }
+#ifndef SQLITE_OMIT_VIRTUALTABLE
+    for(he=sqliteHashFirst(&(db->aModule)); he; he=sqliteHashNext(he))
+    {
+        Module *pModule = sqliteHashData(he);
+        if (pModule->pEpoTab)
+        {
+            Table *pData = pModule->pEpoTab;
+            sqlite3VdbeMultiLoad(v, 1, "sssiiiiiiiii",
+                "main",
+                "etable",
+                sqlite3PreferredTableName(pData->zName),
+                pData->nCol,                     (pData->tabFlags & TF_Readonly) != 0,
+                (pData->tabFlags & TF_Ephemeral) != 0,
+                HasRowid(pData) & (pData->eTabType != TABTYP_VIEW),
+                (pData->tabFlags & TF_HasPrimaryKey) != 0,
+                (pData->tabFlags & TF_Autoincrement) != 0,
+                (pData->iPKey > -1) & HasRowid(pData),
+                (pData->tabFlags & TF_Strict) != 0,
+                (pData->tabFlags & TF_Shadow) != 0);
+        }
+    }
+#endif
+}
+break;
 
   case PragTyp_COLLATION_LIST: {
     int i = 0;
     HashElem *p;
     pParse->nMem = 2;
@@ -1457,11 +1600,11 @@
     pTab = sqlite3FindTable(db, zRight, zDb);
     if( pTab && IsOrdinaryTable(pTab) ){
       pFK = pTab->u.tab.pFKey;
       if( pFK ){
         int iTabDb = sqlite3SchemaToIndex(db, pTab->pSchema);
-        int i = 0; 
+        int i = 0;
         pParse->nMem = 8;
         sqlite3CodeVerifySchema(pParse, iTabDb);
         while(pFK){
           int j;
           for(j=0; j<pFK->nCol; j++){
@@ -1556,12 +1699,12 @@
           assert( x==0 || db->mallocFailed );
         }
         addrOk = sqlite3VdbeMakeLabel(pParse);
 
         /* Generate code to read the child key values into registers
-        ** regRow..regRow+n. If any of the child key values are NULL, this 
-        ** row cannot cause an FK violation. Jump directly to addrOk in 
+        ** regRow..regRow+n. If any of the child key values are NULL, this
+        ** row cannot cause an FK violation. Jump directly to addrOk in
         ** this case. */
         if( regRow+pFK->nCol>pParse->nMem ) pParse->nMem = regRow+pFK->nCol;
         for(j=0; j<pFK->nCol; j++){
           int iCol = aiCols ? aiCols[j] : pFK->aCol[j].iFrom;
           sqlite3ExprCodeGetColumnOfTable(v, pTab, 0, iCol, regRow+j);
@@ -1623,11 +1766,11 @@
   **    PRAGMA quick_check
   **    PRAGMA quick_check(N)
   **
   ** Verify the integrity of the database.
   **
-  ** The "quick_check" is reduced version of 
+  ** The "quick_check" is reduced version of
   ** integrity_check designed to detect most database corruption
   ** without the overhead of cross-checking indexes.  Quick_check
   ** is linear time wherease integrity_check is O(NlogN).
   **
   ** The maximum nubmer of errors is 100 by default.  A different default
@@ -1754,11 +1897,11 @@
         if( pObjTab && pObjTab!=pTab ) continue;
         pPk = HasRowid(pTab) ? 0 : sqlite3PrimaryKeyIndex(pTab);
         sqlite3OpenTableAndIndices(pParse, pTab, OP_OpenRead, 0,
                                    1, 0, &iDataCur, &iIdxCur);
         /* reg[7] counts the number of entries in the table.
-        ** reg[8+i] counts the number of entries in the i-th index 
+        ** reg[8+i] counts the number of entries in the i-th index
         */
         sqlite3VdbeAddOp2(v, OP_Integer, 0, 7);
         for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){
           sqlite3VdbeAddOp2(v, OP_Integer, 0, 8+j); /* index entries counter */
         }
@@ -1799,11 +1942,11 @@
             sqlite3VdbeJumpHere(v, jmp2);
           }
           if( (pTab->tabFlags & TF_Strict)!=0
            && pCol->eCType!=COLTYPE_ANY
           ){
-            jmp2 = sqlite3VdbeAddOp3(v, OP_IsNullOrType, 3, 0, 
+            jmp2 = sqlite3VdbeAddOp3(v, OP_IsNullOrType, 3, 0,
                                      sqlite3StdTypeMap[pCol->eCType-1]);
             VdbeCoverage(v);
             zErr = sqlite3MPrintf(db, "non-%s value in %s.%s",
                                   sqlite3StdType[pCol->eCType-1],
                                   pTab->zName, pTab->aCol[j].zCnName);
@@ -1823,11 +1966,11 @@
             int k;
             pParse->iSelfTab = iDataCur + 1;
             for(k=pCheck->nExpr-1; k>0; k--){
               sqlite3ExprIfFalse(pParse, pCheck->a[k].pExpr, addrCkFault, 0);
             }
-            sqlite3ExprIfTrue(pParse, pCheck->a[0].pExpr, addrCkOk, 
+            sqlite3ExprIfTrue(pParse, pCheck->a[0].pExpr, addrCkOk,
                 SQLITE_JUMPIFNULL);
             sqlite3VdbeResolveLabel(v, addrCkFault);
             pParse->iSelfTab = 0;
             zErr = sqlite3MPrintf(db, "CHECK constraint failed in %s",
                 pTab->zName);
@@ -1898,11 +2041,11 @@
             sqlite3VdbeAddOp3(v, OP_Concat, 4, 2, 3);
             integrityCheckResultRow(v);
             sqlite3VdbeJumpHere(v, addr);
           }
         }
-      } 
+      }
     }
     {
       static const int iLn = VDBE_OFFSET_LINENO(2);
       static const VdbeOpList endCode[] = {
         { OP_AddImm,      1, 0,        0},    /* 0 */
@@ -1940,11 +2083,11 @@
   ** The second form of this pragma is a no-op if the main database file
   ** has not already been initialized. In this case it sets the default
   ** encoding that will be used for the main database file if a new file
   ** is created. If an existing main database file is opened, then the
   ** default text encoding for the existing database is used.
-  ** 
+  **
   ** In all cases new databases created using the ATTACH command are
   ** created to use the same default text encoding as the main database. If
   ** the main database has not been initialized and/or created when ATTACH
   ** is executed, this is done before the ATTACH operation.
   **
@@ -2030,13 +2173,14 @@
   **
   ** The user-version is not used internally by SQLite. It may be used by
   ** applications for any purpose.
   */
   case PragTyp_HEADER_VALUE: {
-    int iCookie = pPragma->iArg;  /* Which cookie to read or write */
+    int iCookie;                  /* Which cookie to read or write */
+    iCookie = pPragma->iArg & PRAGMA_HEADER_VALUE_MASK;
     sqlite3VdbeUsesBtree(v, iDb);
-    if( zRight && (pPragma->mPragFlg & PragFlg_ReadOnly)==0 ){
+    if( zRight && (pPragma->iArg & PRAGMA_HEADER_VALUE_READONLY)==0 ){
       /* Write the specified cookie value */
       static const VdbeOpList setCookie[] = {
         { OP_Transaction,    0,  1,  0},    /* 0 */
         { OP_SetCookie,      0,  0,  0},    /* 1 */
       };
@@ -2123,12 +2267,12 @@
   */
   case PragTyp_WAL_AUTOCHECKPOINT: {
     if( zRight ){
       sqlite3_wal_autocheckpoint(db, sqlite3Atoi(zRight));
     }
-    returnSingleInt(v, 
-       db->xWalCallback==sqlite3WalDefaultHook ? 
+    returnSingleInt(v,
+       db->xWalCallback==sqlite3WalDefaultHook ?
            SQLITE_PTR_TO_INT(db->pWalArg) : 0);
   }
   break;
 #endif
 
@@ -2164,11 +2308,11 @@
   **              that would have been done.  Off by default.
   **
   **    0x0002    Run ANALYZE on tables that might benefit.  On by default.
   **              See below for additional information.
   **
-  **    0x0004    (Not yet implemented) Record usage and performance 
+  **    0x0004    (Not yet implemented) Record usage and performance
   **              information from the current session in the
   **              database file so that it will be available to "optimize"
   **              pragmas run by future database connections.
   **
   **    0x0008    (Not yet implemented) Create indexes that might have
@@ -2175,11 +2319,11 @@
   **              been helpful to recent queries
   **
   ** The default MASK is and always shall be 0xfffe.  0xfffe means perform all
   ** of the optimizations listed above except Debug Mode, including new
   ** optimizations that have not yet been invented.  If new optimizations are
-  ** ever added that should be off by default, those off-by-default 
+  ** ever added that should be off by default, those off-by-default
   ** optimizations will have bitmasks of 0x10000 or larger.
   **
   ** DETERMINATION OF WHEN TO RUN ANALYZE
   **
   ** In the current implementation, a table is analyzed if only if all of
@@ -2236,11 +2380,11 @@
             break;
           }
         }
         if( szThreshold ){
           sqlite3OpenTable(pParse, iTabCur, iDb, pTab, OP_OpenRead);
-          sqlite3VdbeAddOp3(v, OP_IfSmaller, iTabCur, 
+          sqlite3VdbeAddOp3(v, OP_IfSmaller, iTabCur,
                          sqlite3VdbeCurrentAddr(v)+2+(opMask&1), szThreshold);
           VdbeCoverage(v);
         }
         zSubSql = sqlite3MPrintf(db, "ANALYZE \"%w\".\"%w\"",
                                  db->aDb[iDb].zDbSName, pTab->zName);
@@ -2370,11 +2514,11 @@
       int j;
       if( db->aDb[i].zDbSName==0 ) continue;
       pBt = db->aDb[i].pBt;
       if( pBt==0 || sqlite3BtreePager(pBt)==0 ){
         zState = "closed";
-      }else if( sqlite3_file_control(db, i ? db->aDb[i].zDbSName : 0, 
+      }else if( sqlite3_file_control(db, i ? db->aDb[i].zDbSName : 0,
                                      SQLITE_FCNTL_LOCKSTATE, &j)==SQLITE_OK ){
          zState = azLockName[j];
       }
       sqlite3VdbeMultiLoad(v, 1, "ss", db->aDb[i].zDbSName, zState);
     }
@@ -2394,11 +2538,11 @@
   } /* End of the PRAGMA switch */
 
   /* The following block is a no-op unless SQLITE_DEBUG is defined. Its only
   ** purpose is to execute assert() statements to verify that if the
   ** PragFlg_NoColumns1 flag is set and the caller specified an argument
-  ** to the PRAGMA, the implementation has not added any OP_ResultRow 
+  ** to the PRAGMA, the implementation has not added any OP_ResultRow
   ** instructions to the VM.  */
   if( (pPragma->mPragFlg & PragFlg_NoColumns1) && zRight ){
     sqlite3VdbeVerifyNoResultRow(v);
   }
 
@@ -2425,11 +2569,11 @@
   sqlite3_stmt *pPragma;    /* The pragma statement to run */
   sqlite_int64 iRowid;      /* Current rowid */
   char *azArg[2];           /* Value of the argument and schema */
 };
 
-/* 
+/*
 ** Pragma virtual table module xConnect method.
 */
 static int pragmaVtabConnect(
   sqlite3 *db,
   void *pAux,
@@ -2487,11 +2631,11 @@
 
   *ppVtab = (sqlite3_vtab*)pTab;
   return rc;
 }
 
-/* 
+/*
 ** Pragma virtual table module xDisconnect method.
 */
 static int pragmaVtabDisconnect(sqlite3_vtab *pVtab){
   PragmaVtab *pTab = (PragmaVtab*)pVtab;
   sqlite3_free(pTab);
@@ -2585,15 +2729,15 @@
     pragmaVtabCursorClear(pCsr);
   }
   return rc;
 }
 
-/* 
+/*
 ** Pragma virtual table module xFilter method.
 */
 static int pragmaVtabFilter(
-  sqlite3_vtab_cursor *pVtabCursor, 
+  sqlite3_vtab_cursor *pVtabCursor,
   int idxNum, const char *idxStr,
   int argc, sqlite3_value **argv
 ){
   PragmaVtabCursor *pCsr = (PragmaVtabCursor*)pVtabCursor;
   PragmaVtab *pTab = (PragmaVtab*)(pVtabCursor->pVtab);
@@ -2644,15 +2788,15 @@
   PragmaVtabCursor *pCsr = (PragmaVtabCursor*)pVtabCursor;
   return (pCsr->pPragma==0);
 }
 
 /* The xColumn method simply returns the corresponding column from
-** the PRAGMA.  
+** the PRAGMA.
 */
 static int pragmaVtabColumn(
-  sqlite3_vtab_cursor *pVtabCursor, 
-  sqlite3_context *ctx, 
+  sqlite3_vtab_cursor *pVtabCursor,
+  sqlite3_context *ctx,
   int i
 ){
   PragmaVtabCursor *pCsr = (PragmaVtabCursor*)pVtabCursor;
   PragmaVtab *pTab = (PragmaVtab*)(pVtabCursor->pVtab);
   if( i<pTab->iHidden ){
@@ -2661,11 +2805,11 @@
     sqlite3_result_text(ctx, pCsr->azArg[i-pTab->iHidden],-1,SQLITE_TRANSIENT);
   }
   return SQLITE_OK;
 }
 
-/* 
+/*
 ** Pragma virtual table module xRowid method.
 */
 static int pragmaVtabRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *p){
   PragmaVtabCursor *pCsr = (PragmaVtabCursor*)pVtabCursor;
   *p = pCsr->iRowid;

